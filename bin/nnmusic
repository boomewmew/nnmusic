#!/usr/bin/env python

# nnmusic, a library for composing music using artificial neural networks.
# Copyright (C) 2016  Boo Mew Mew

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Address correspondence about this library to boomewmew@gmail.com.

"""Train and run nnmusic neural nets."""

import argparse as ap
import nnmusic  as nnm

COLOR_DICT = {
    s: nnm.ANSICode(t)
    for s, t in (("convert", "green"), ("train", "red"), ("compose", "blue"))
}

def format_help(message, verbs):
    """Append compatible verbs to help message.
    
    Keyword arguments:
        message -- Help message.
        verbs   -- Container of compatible verbs.
    """
    return "{} ({})".format(
        message, ", ".join((nnm.wrap_ansi(s, COLOR_DICT[s]) for s in verbs))
    )

parser = ap.ArgumentParser(
    description="Each flag's description specifies in parentheses the verbs "
    "for which it is appropriate. Flags not appropriate for the supplied verb "
    "will be ignored.", formatter_class=ap.ArgumentDefaultsHelpFormatter
)

help = "Action to perform."
parser.add_argument("verb", default=ap.SUPPRESS, choices=COLOR_DICT.keys(),
                    help=help)

help = format_help("Directory containing audio files.", ("convert",))
parser.add_argument("-a", "--audio-dir", default="audio", help=help)

help = format_help("Expected sample rate in Hz.", ("convert", "compose"))
parser.add_argument("-s", "--sample-rate", default=nnm.DEFAULT_RATE, type=int,
                    help=help)

help = format_help("HDF5 file.", ("convert", "train"))
parser.add_argument("-H", "--hdf5-file", default="audio.hdf5", help=help)

help = format_help("Number of time steps per chunk of audio data.",
                   ("convert",))
parser.add_argument("-C", "--chunk-size", default=nnm.DEFAULT_CHUNK_SIZE,
                    type=int, help=help)

help = format_help("Directory for printing training log.", ("train",))
parser.add_argument("-l", "--log-dir", default="log", help=help)

help = format_help("Number of threads", ("train",))
parser.add_argument("-n", "--n-threads", default=nnm.DEFAULT_THREADS, type=int,
                    help=help)

help = format_help("Number of training epochs.", ("train",))
parser.add_argument("-N", "--n-epochs", default=nnm.DEFAULT_EPOCHS, type=int,
                    help=help)

help = format_help("File containing neural-net model.", ("train", "compose"))
parser.add_argument("-m", "--model-file", default="nn.model", help=help)

help = format_help("File containing auxiliary components of neural-net state.",
                   ("train", "compose"))
parser.add_argument("-p", "--pickle-file", default="nn.pickle", help=help)

help = format_help("Audio file to write to.", ("compose",))
parser.add_argument("-A", "--audio-file", default="audio.wav", help=help)

help = format_help("Number of time steps in composition.", ("compose",))
parser.add_argument("-d", "--duration", default=nnm.DEFAULT_RATE * 5 * 60,
                    type=int, help=help)

options = parser.parse_args()

if options.verb == "convert":

    nnm.audio_to_hdf5(options.audio_dir, options.hdf5_file,
                      options.chunk_size, options.sample_rate)

elif options.verb == "train":

    nnm.train(options.hdf5_file, options.model_file, options.pickle_file,
              options.log_dir, options.n_threads, options.n_epochs)

elif options.verb == "compose":

    nnm.compose(options.model_file, options.pickle_file, options.audio_file,
                options.duration, options.hdf5_file, options.sample_rate)

else:

    raise SystemExit(
        nnm.wrap_err("Unrecognized verb \"{}\".".format(options.verb))
    )
