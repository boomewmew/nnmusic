#!/usr/bin/env python

# nnmusic, a library for composing music using artificial neural networks.
# Copyright (C) 2016  Boo Mew Mew

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Address correspondence about this library to boomewmew@gmail.com.

"""Train and run nnmusic neural nets."""

import argparse as ap
import nnmusic  as nnm

CONVERT_VERB = "convert"
TRAIN_VERB   = "train"

parser = ap.ArgumentParser(
    description="Each flag's description specifies in parentheses the verbs "
    "for which it is appropriate. Flags not appropriate for the supplied verb "
    "will be ignored.", formatter_class=ap.ArgumentDefaultsHelpFormatter
)

parser.add_argument(
    "verb", default=ap.SUPPRESS, choices=(CONVERT_VERB, TRAIN_VERB),
    help="Action to perform."
)

parser.add_argument(
    "-a", "--audio-dir", default="audio",
    help="Directory containing audio files ({}).".format(CONVERT_VERB)
)

parser.add_argument(
    "-s", "--sample-rate", default=nnm.DEFAULT_RATE, type=int,
    help="Expected sample rate in Hz ({}).".format(CONVERT_VERB)
)

parser.add_argument(
    "-H", "--hdf5-file-name", default="audio.hdf5",
    help="HDF5 file ({}, {}).".format(CONVERT_VERB, TRAIN_VERB)
)

parser.add_argument(
    "-C", "--chunk-size", default=nnm.DEFAULT_CHUNK_SIZE, type=int,
    help="Number of time steps per chunk of audio data ({}).".format(
        CONVERT_VERB
    )
)

parser.add_argument(
    "-c", "--checkpoint-dir", default="weights",
    help="Checkpoint directory containing trained neural-net state "
    "({}).".format(TRAIN_VERB)
)

parser.add_argument(
    "-l", "--log-dir", default="log",
    help="Directory for printing training logs ({}).".format(TRAIN_VERB)
)

parser.add_argument(
    "-n", "--n-threads", default=nnm.DEFAULT_THREADS, type=int,
    help="Number of threads ({}).".format(TRAIN_VERB)
)

parser.add_argument(
    "-N", "--n-epochs", default=nnm.DEFAULT_EPOCHS, type=int,
    help="Number of training epochs ({}).".format(TRAIN_VERB)
)

options = parser.parse_args()

if options.verb == CONVERT_VERB:

    nnm.audio_to_hdf5(options.audio_dir, options.hdf5_file_name,
                      options.chunk_size, options.sample_rate)

elif options.verb == TRAIN_VERB:

    nnm.train_nn(options.hdf5_file_name, options.checkpoint_dir,
                 options.log_dir, options.n_threads, n_epochs=options.n_epochs)

else:

    raise SystemExit(
        nnm.wrap_err("Unrecognized verb \"{}\".".format(options.verb))
    )
